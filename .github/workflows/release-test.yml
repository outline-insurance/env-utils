on:
  workflow_dispatch:
  push:
  
name: (TEST) Release Env-Utils

jobs:
  tag:
    name: Tag New Version
    runs-on: [ubuntu-latest]
    timeout-minutes: 15
    outputs:
      version: ${{ steps.version_extract.outputs.version }}
      version-prebuilt: ${{ steps.version_extract.outputs.version-prebuilt }}

    steps:
    - name: Checkout
      # From: https://github.com/actions/checkout
      uses: actions/checkout@v4

    - name: Extract Version
      id: version_extract
      run: |
        export VERSION=$(cat version.txt)
        echo "version=$VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version-prebuilt=v$VERSION-prebuilt"
        echo "version-prebuilt=v$VERSION-prebuilt" >> $GITHUB_OUTPUT
        
    - name: Push New Tag
      id: tag_version
      # From: https://github.com/marketplace/actions/github-tag
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag:  ${{ steps.version_extract.outputs.version }}

  build_and_release:
    name: Build and Release
    runs-on: [ubuntu-latest]
    timeout-minutes: 15
    needs: tag

    steps:
    - name: Checkout
      # From: https://github.com/actions/checkout
      uses: actions/checkout@v4
      # needed for gorealease action to function correctly
      with:
        fetch-depth: 0

    - name: Setup Go
      # From: https://github.com/actions/setup-go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Configure DEV AWS credentials
      # From: https://github.com/aws-actions/configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      # From: https://github.com/aws-actions/amazon-ecr-login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Test
      id: build 
      env:
        GIT_SHA: ${{ github.sha }}
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#contexts
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: outline-app-base-slim
        IMAGE_TAG: latest-20
      run: |
        echo "building package"
        go install .
        go build
        echo "package built"

        echo "running go tests"
        go test -v ./...

        echo "testing command line functionality"
        # Test secret functionality.
        ./env-utils secret populate "sample/secret.jsonc" -r "us-east-2"
        ./diff_test.sh .secret_env sample/.secret_env
        
        ./env-utils secret populate -l "sample/secret.jsonc" -r "us-east-2"
        ./diff_test.sh .secret_env sample/.secret_env_local

        # Test non-secret functionality.
        ./env-utils non-secret populate "sample/non-secret.jsonc"
        ./diff_test.sh .non_secret_env sample/.non_secret_env
        
        ./env-utils non-secret populate -l "sample/non-secret.jsonc"
        ./diff_test.sh .non_secret_env sample/.non_secret_env_local
        echo "finished testing command line functionality"

        echo "building for debian-based release"
        export DIRECTORY=$(pwd)
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker run -v $DIRECTORY:/volume $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG /bin/bash
        echo "finished building for debian-based release"

    - name: Import GPG key
      id: import_gpg
      # From: https://github.com/crazy-max/ghaction-import-gpg
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Run GoReleaser
      # From: https://github.com/marketplace/actions/goreleaser-action
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        # This version: https://github.com/goreleaser/goreleaser/releases
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
    
    - name: Release Prebuilt Binary
      # From: https://github.com/marketplace/actions/automatic-releases
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: ${{ needs.tag.outputs.version-prebuilt }}
        prerelease: false
        title: ${{ needs.tag.outputs.version-prebuilt }}
        files: |
            env-utils
